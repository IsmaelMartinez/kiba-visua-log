# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python36:
      python.version: '3.6'
    Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    flake8 src test
  displayName: 'Run Lint Tests'

- script: |
    pytest -v --junitxml=test.junit.xml --html=pytest_report.html --self-contained-html --cov=src --cov-report html:cov_html --cov-report xml:cov.xml --cov-config .coveragerc
  displayName: 'Run unit tests'

- task: PublishTestResults@2
  displayName: 'Publish junit test results'
  continueOnError: true
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: 'test.junit.xml'
    mergeTestResults: true # Optional
    publishRunAttachments: true # Optional

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'pytest_report.html'
    artifactName: 'Unit test report'
  continueOnError: true
  condition: succeededOrFailed()

# Publish Code Coverage Results
# Publish Cobertura code coverage results
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura' # Options: cobertura, jaCoCo
    summaryFileLocation: $(System.DefaultWorkingDirectory)/cov.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/cov_html
  condition: succeededOrFailed()

- script: |
    pip install wheel
    python setup.py sdist bdist_wheel
  displayName: 'Preparing for release'

# - task: TwineAuthenticate@0
#   inputs:
#     externalFeeds: 'Pypi-MuPip'

# - script: 'twine upload -r Pypi-MuPip --config-file $(PYPIRC_PATH) dist/*'
#   displayName: 'Publish to pypi'

- task: CopyFiles@2
  inputs:
    contents: dist/**
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    artifactName: Library_Basic_Wheel
